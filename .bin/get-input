#!/bin/zsh

# get-input [-v|-vb] <input_name>
# Store (and validate) an input

RED="\e[31m"
GRN="\e[32m"
YLW="\e[33m"
NC="\e[0m"
CUT="\r\033[1A\033[0K"
NAME_REGEX="[A-Za-z\s,\.]{2,}"
EMAIL_REGEX="[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}"

validate=`[[ $1 =~ ^-vb?$ ]]; echo $?`
allow_blank=`[[ $1 =~ ^-vb$ ]]; echo $?`

if [ ! $1 ]; then
  echo "Usage: get-input [option] <input_name>"
  echo
  echo "Options:"
  echo -e "  -v\t\t\tValidate the input"
  echo -e "  -vb\t\t\tValidate the input and allow blank values"
  return
fi

if [ $validate = 0 ]; then
  log_input_error () {
    tput civis # hide cursor
    echo "$CUT$RED$1\c$NC"
    sleep 1
    echo $1
    echo "$CUT\r$NC> \c"
    tput cnorm # show cursor
  }

  if [[ ! $2 =~ (name|email|editor|working_dir) ]]; then
    echo "${YLW}WARNING: validation not available for $2$NC"
  fi

  echo -n "> "
  read $2

  case $2 in
    name)
      while [ $allow_blank = 1 ] || [ $name ] && ! [[ $name =~ $NAME_REGEX ]]; do
        log_input_error "You must specify a valid name"
        read name
      done
      ;;
    email)
      while [ $allow_blank = 1 ] || [ $email ] && [[ ! $email =~ $EMAIL_REGEX ]]; do
        if [ $email ]; then
          log_input_error "$email is not a valid email"
        else
          log_input_error "You must specify an email"
        fi
        read email
      done
      ;;
    editor)
      while [ $allow_blank = 1 ] || [ $editor ] && [ ! -f /Applications/$editor.app/Contents/MacOS/$editor ]; do
        if [ $editor ]; then
          log_input_error "${editor##*/} is not a valid application"
        else
          log_input_error "You must specify a valid editor"
        fi
        read editor
      done
      [ $editor ] && editor="/Applications/$editor.app/Contents/MacOS/$editor"
      ;;
    working_dir)
      while [ $allow_blank = 1 ] || [ $working_dir ] && [ ! -d $HOME/$working_dir/dotfiles ]; do
        if [ -d $HOME/$working_dir ]; then
          log_input_error "$HOME/$working_dir doesn't contain the required dotfiles"
        else
          log_input_error "$HOME/$working_dir is not a valid directory"
        fi
        read working_dir
      done
      [ $working_dir ] && working_dir="$HOME/$working_dir"
      ;;
    *);;
  esac

  unset -f log_input_error
else
  echo -n "> "
  read $1
fi
