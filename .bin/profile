#!/bin/zsh

BB="\e[1m"
RED="\e[31m"
GRN="\e[32m"
BLU="\e[34m"
CYN="\e[36m"
YLW="\e[33m"
NC="\e[0m"
CUT="\r\033[1A\033[0K"

PROFILE_CMD="${GRN}profile${NC}"
PROFILE_CONFIG_CMD="$PROFILE_CMD ${BB}config${NC}"
PROFILE_INSTALL_CMD="$PROFILE_CMD ${BB}install${NC}"

NAME_REGEX="[A-Za-z\s,\.]{2,}"
EMAIL_REGEX="[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}"

WORKING_DIR_NAME=${WORKING_DIR##*/}

# Available editors:
EDITORS=(
  "atom"     # Atom
  "brackets" # Brackets
  "emacs"    # Emacs
  "coda"     # Coda
  "code"     # Visual Studio Code
  "mate"     # TextMate
  "subl"     # Sublime Text
  "vim"      # Vim
)
case $EDITOR in
  code)
    EDITOR_NAME="Visual Studio Code"
    ;;
  mate)
    EDITOR_NAME="Text Mate"
    ;;
  subl)
    EDITOR_NAME="Sublime Text"
    ;;
  *)
    EDITOR_NAME="${(C)EDITOR}"
    ;;
esac

# TODO: check for updates

# get-profile-input <input> [--allow-blank]
# Read, validate, and store an input
get-profile-input () {
  allow_blank=$([ "$2" = --allow-blank ]; echo $?)

  log-input-error () {
    tput civis
    echo "${CUT}${RED}$1\c${NC}"
    sleep 1
    echo
    echo -n "${CUT}${NC}> "
    tput cnorm
  }

  echo -n "> "
  read -r $1

  case $1 in
    name)
      while [ $allow_blank = 1 ] || [ $name ] && ! [[ $name =~ $NAME_REGEX ]]; do
        log-input-error "You must specify a valid name"
        read -r name
      done
      ;;
    email)
      while [ $allow_blank = 1 ] || [ $email ] && [[ ! $email =~ $EMAIL_REGEX ]]; do
        if [ $email ]; then
          log-input-error "$email is not a valid email"
        else
          log-input-error "You must specify an email"
        fi
        read -r email
      done
      ;;
    working_dir)
      while [ $allow_blank = 1 ] || [ $working_dir ] && [ ! -d $HOME/$working_dir/dotfiles ]; do
        if [ -d $HOME/$working_dir ]; then
          log-input-error "$HOME$([ $working_dir ] && echo /$working_dir) doesn't contain any dotfiles"
        else
          log-input-error "$HOME/$working_dir is not a valid directory"
        fi
        read -r working_dir
      done
      [ $working_dir ] && working_dir="$HOME/$working_dir"
      ;;
    editor)
      while [ $allow_blank = 1 ] || [ $editor ] && [[ -z "${EDITORS[(r)$editor]}" ]] && ! type -a $editor >/dev/null; do
        if [ $editor ]; then
          log-input-error "$editor is not a valid command"
        else
          log-input-error "You must specify a valid command"
        fi
        read -r editor
      done
      ;;
  esac
}

# ln-dotfiles
# Create symlink for files in $WORKING_DIR/dotfiles
ln-dotfiles () {
  ln-dotfiles-dir () { # ln all files in a dir
    dir_path=$1
    target_path=$2

    for file in "$dir_path"/*; do
      filename=$(basename $file)
      target=$(readlink $target_path/$filename)

      if [ ! $target ] || [ $target != $file ]; then
        [ -f $target_path/$filename ] && cp -H $target_path/$filename $target_path/${filename}.backup
        ln -sf $file $target_path/$filename
      fi
    done
  }

  for file in "$WORKING_DIR"/dotfiles/.*; do
    filename=$(basename $file)
    target=$(readlink $HOME/$filename)

    if [ ! $target ] || [ $target != $WORKING_DIR/dotfiles/$filename ]; then
      case $filename in
        .DS_Store|.git) # skip
          ;;
        .gitconfig) # use global
          ln -sf $file $HOME/.gitconfig_global
          ;;
        .atom) # Atom
          atom_path="$HOME/.atom"
          if [ -d $atom_path ]; then
            ln-dotfiles-dir $file $atom_path
          fi
          ;;
        .subl) # Sublime Text
          subl_path="/Users/$USER/Library/Application Support/Sublime Text 3/Packages/User"
          if [ -d $subl_path ]; then
            ln-dotfiles-dir $file $subl_path
          fi
          ;;
        *)
          [ -f $HOME/$filename ] && cp -H $HOME/$filename $HOME/${filename}.backup
          ln -sf $file $HOME/$filename
          ;;
      esac
    fi
  done
}

# profile [check|config|install|reload|h]
# Print the current profile or execute one of the commands
case $1 in
  help|-h|--help)
    echo "Usage: profile [command]"
    echo
    echo "Commands:"
    echo -e "  config\t Edit the current profile"
    echo -e "  install\t Install a new profile"
    echo -e "  reload\t Reload the current profile"
    echo -e "  check\t\t Check if the current profile is installed correctly"
    echo -e "  help\t\t Print this help message"
    ;;

  check)
    if [[ ! $NAME =~ $NAME_REGEX ]] || [[ ! $EMAIL =~ $EMAIL_REGEX ]] || ([[ -n "${EDITORS[(r)$editor]}" ]] && ! type -a $editor >/dev/null) || [ ! -d $WORKING_DIR/dotfiles ]; then
      echo "${RED}‚ö†Ô∏è  Profile installed incorrectly${NC}"
      echo "Type $PROFILE_INSTALL_CMD to install a new profile for the current user"
      return 1
    fi
    ;;

  config)
    changed_keys=0
    installation=$([[ $2 =~ ^install$ ]]; echo $?)
    reload=$([[ $2 =~ ^reload$ ]]; echo $?)
    name_msg="${BB}üîè First and last name${NC} ($([ $installation = 0 ] && echo 'no accent or special characters' || echo $NAME))"
    email_msg="${BB}üìß Email address${NC} ($([ $installation = 0 ] && echo 'to sign your commits' || echo $EMAIL))"
    working_dir_msg="${BB}üìÅ Working directory${NC} ($([ $installation = 0 ] && echo relative to $HOME, e.g. code || echo \~/$WORKING_DIR_NAME))"
    editor_msg="${BB}‚å®Ô∏è  Text editor${NC} ($([ $installation = 0 ] && echo 'cli command of the app you use, e.g. atom, subl, code, vim, etc.' || echo $EDITOR_NAME))"

    if [ $installation = 1 ]; then
      profile check
      [ $? = 1 ] && return
    fi

    if [ $reload = 1 ]; then
      echo "${CYN}${BB}üë§ $USER${NC}"
      [ $installation = 1 ] && echo "(hit ‚èé if unchanged)"

      echo ""

      for key in NAME EMAIL WORKING_DIR EDITOR; do
        tmp_key="${(L)key}"
        eval echo $"${tmp_key}_msg"
        eval get-profile-input $tmp_key "$([ $installation = 1 ] && echo --allow-blank)"
        if [ ${(P)tmp_key} ] && [ "${(P)tmp_key}" != "${(P)key}" ]; then
          export $key=${(P)tmp_key}
          changed_keys+=1
        fi
      done

      echo ""
    fi

    if [ $changed_keys -gt 0 ] || [ $reload = 0 ]; then
      _action=$([ $reload = 0 ] && echo 'Reloading' || echo 'Storing')
      echo "${BLU}$_action profile...${NC}"
      echo "# üë§ $USER" > $HOME/.zprofile
      for key in NAME EMAIL WORKING_DIR EDITOR; do
        echo "export $key=\"${(P)key}\"" >> $HOME/.zprofile
      done
      echo "export LANG=\"en_US.UTF-8\"" >> $HOME/.zprofile
      echo "export LC_ALL=\"en_US.UTF-8\"" >> $HOME/.zprofile
      echo "${CUT}${GRN}$_action profile ‚úÖ${NC}"
    else
      echo "Nothing changed"
      return
    fi

    echo "${BLU}Linking dotfiles...${NC}"
    if ! ln-dotfiles; then
      echo "${RED}ERROR: can't link dotfiles${NC}"
      echo "Please try again or open an issue here https://github.com/gabrielecanepa/dotfiles/issues/new"
      return 1
    fi
    echo "${CUT}${GRN}Linking dotfiles ‚úÖ${NC}"

    echo "${BLU}Configuring git...${NC}"
    git config --global user.name "$NAME"
    git config --global user.email "$EMAIL"
    case $EDITOR in
      [Aa]tom|[Cc]ode|[Mm]ate)
        GIT_EDITOR="$EDITOR -w"
        ;;
      [Ee]macs|[Ss]ubl)
        GIT_EDITOR="$EDITOR -nw"
        ;;
      *)
        GIT_EDITOR="$EDITOR"
        ;;
    esac
    git config --global core.editor "$GIT_EDITOR"
    git config --global include.path "$HOME/.gitconfig_global"
    git config --global core.excludesfile "$HOME/.gitignore"
    echo "${CUT}${GRN}Configuring git ‚úÖ${NC}"

    zsh
    ;;

  install)
    if profile check >/dev/null; then
      echo "${YLW}WARNING: you already have a profile installed for $USER${NC}"
      echo -n "Do you want to override the current configuration? (y/N) "
      read -r choice
      [[ $choice =~ [yY] ]] && profile config install
    else
      profile config install
    fi
    ;;

  (reload)
    profile config reload
    ;;

  *)
    if [ $1 ]; then
      echo "${RED}Unknown option: $1${NC}"
      echo "Type $PROFILE_CMD to print your current profile, or $PROFILE_CONFIG_CMD to modify it"
    else
      if profile check; then
        echo "${BB}${CYN}üë§ $USER${NC}"
        echo " ‚åô üîè $NAME"
        echo " ‚åô üìß $EMAIL"
        echo " ‚åô üìÅ ~/$WORKING_DIR_NAME"
        echo " ‚åô üìù $EDITOR_NAME"
      fi
    fi
    ;;
esac
