#!/bin/zsh

profile_cmd=`echo -gB profile`
profile_config_cmd="$profile_cmd `echo -B config`"
profile_install_cmd="$profile_cmd `echo -B install`"

check_profile_installation () {
  if [[ ! $NAME =~ $name_regex ]] || [[ ! $EMAIL =~ $email_regex ]] || [ ! -f $EDITOR ] || [ ! -d $WORKING_DIR/dotfiles ]; then
    echo -r "⚠️  Profile installed incorrectly"
    echo "Type $profile_install_cmd to install a profile for `echo -c $USER`"
    return 1
  fi
}

link_dotfiles () {
  check_profile_installation
  [ $? = 1 ] && return

  for file in $WORKING_DIR/dotfiles/.*; do
    filename=`basename $file`
    target=`readlink $HOME/$filename`
    if [ ! $target ] || [ $target != $WORKING_DIR/dotfiles/$filename ]; then
      case $filename in
        .git|.github|.iterm2) # skip
          ;;

        .atom) # Atom
          atom_path="$HOME/.atom"
          if (type atom >/dev/null) && [ -d $atom_path ]; then
            for atom_file in $file/*; do
              atom_filename=`basename $atom_file`
              atom_target=`readlink $atom_path/$atom_filename`
              if [ "$atom_target" != "$atom_file" ]; then
                rm -f $atom_path/$atom_filename
                ln -sf $atom_file $atom_path/$atom_filename
              fi
            done
          fi
          ;;
        .gitconfig) # use global
          ln -sf $file $HOME/.gitconfig_global
          ;;
        .oh-my-zsh) # link themes
          themes_path="$HOME/.oh-my-zsh/custom/themes"
          for theme in $file/*; do
            theme_name=`basename $theme`
            theme_target=`readlink $themes_path/$theme_name`
            if [ "$theme_target" != "$theme" ]; then
              rm -f $themes_path/$theme_name
              ln -sf $theme $themes_path/$theme_name
            fi
          done
          ;;
        .scripts) # TODO: minify custom scripts
          ;;
        .zshrc) # create backup
          for zshconfig in .zshrc .zshrc.backup; do
            target=`readlink $HOME/$zshconfig`
            if [ "$target" != "$WORKING_DIR/dotfiles/.zshrc" ]; then
              rm -f $HOME/$zshconfig
              ln -sf $WORKING_DIR/dotfiles/.zshrc $HOME/$zshconfig
            fi
          done
          ;;
        *)
          [ -f $HOME/$filename ] && rm -f $HOME/$filename
          ln -sf $file $HOME/$filename
          ;;
      esac
    fi
  done
}

# Print, install, configure, or reload the current profile
# Usage: profile [install|config|reload]
profile () {
  case $1 in
    (config)
      changed_keys=0
      installation=`[[ $2 =~ ^install$ ]]; echo $?`
      reload=`[[ $2 =~ ^reload$ ]]; echo $?`
      name_msg="🔏 First and last name$NC (`(( $installation == 0 )) && echo 'no accent or special characters' || echo $NAME`)"
      email_msg="📧 Email address$NC (`(( $installation == 0 )) && echo 'to sign your commits' || echo $EMAIL`)"
      working_dir_msg="📁 Working directory$NC (`(( $installation == 0 )) && echo \"relative to $HOME, e.g. code\" || echo ${WORKING_DIR##*/}`)"
      editor_msg="⌨️  Text editor$NC (`(( $installation == 0 )) && echo 'name of the app you use, e.g. Atom, Visual Studio Code, Sublime Text' || echo ${EDITOR##*/}`)"

      if (( $installation == 1 )); then
        check_profile_installation
        [ $? = 1 ] && return
      fi

      if (( $reload == 1 )); then
        echo -cB "👤 $USER"
        (( $installation == 1 )) && echo "(hit ⏎ if unchanged)"
        echo ""

        for key in NAME EMAIL WORKING_DIR EDITOR; do
          tmp_key="${(L)key}"
          eval echo -B $"${tmp_key}_msg"
          eval get_input $tmp_key "`(( $installation == 0 )) && echo -v || echo -vb`"
          if [ ${(P)tmp_key} ] && [ "${(P)tmp_key}" != "${(P)key}" ]; then
            export "`echo $key=\"${(P)tmp_key}\"`"
            changed_keys+=1
          fi
        done

        echo ""
      fi

      if (( $changed_keys > 0 )) || (( $reload == 0 )); then
        echo -b "Storing profile..."
        echo "# 👤 $USER" > $HOME/.zprofile
        for key in NAME EMAIL WORKING_DIR EDITOR; do
          echo "export $key=\"${(P)key}\"" >> $HOME/.zprofile
        done
        echo "export LANG=\"en_US.UTF-8\"" >> $HOME/.zprofile
        echo "export LC_ALL=\"en_US.UTF-8\"" >> $HOME/.zprofile
        echo -T -g "Storing profile ✅"
      else
        echo "Nothing changed"
        return
      fi

      if (( $installation == 0 )) && [ -f "`pwd`/install.zsh" ]; then
        echo -b "Removing installation script..."
        rm -rf "`pwd`/install.zsh"
        echo -T -g "Removing installation script ✅"
      fi

      echo -b "Reloading zsh and linking dotfiles..."
      for zfile in .zprofile .zshrc .zlogin; do
        if [ -f $HOME/$zfile ]; then
          . $HOME/$zfile
        else
          echo -T -r "ERROR: can't find $zfile in $HOME"
          return
        fi
      done
      link_dotfiles

      echo -T -g "Reloading zsh and linking dotfiles ✅"

      echo -b "Configuring git..."
      git config --global user.name "$NAME"
      git config --global user.email "$EMAIL"
      git config --global core.editor "'$EDITOR'"
      git config --global include.path "$HOME/.gitconfig_global"
      git config --global core.excludesfile "$HOME/.gitignore"
      echo -T -g "Configuring git ✅"

      echo ""
      echo "👌 Awesome, all set! `(( $reload == 1 )) && echo Type $profile_cmd to check your current profile``(( $installation == 0 )) && echo , or $profile_config_cmd to modify it`"
      ;;

    (install)
      if (check_profile_installation >/dev/null); then
        echo -y "WARNING: You already have a profile installed for $USER"
        printf "Do you want to override the current configuration? (y/n [n]) "
        read choice
        [[ $choice =~ [yY] ]] && profile config install
      else
        profile config install
      fi
      ;;

    (reload)
      profile config reload
      ;;

    (*)
      if (check_profile_installation); then
        echo -cB "👤 $USER"
        echo " ⌙ 🔏 $NAME"
        echo " ⌙ 📧 $EMAIL"
        echo " ⌙ 📁 ~/${WORKING_DIR##*/}"
        echo " ⌙ ⌨️  ${EDITOR##*/}"
        echo
        echo "Type $profile_config_cmd to edit this profile"
      fi
      ;;
  esac
}
