#!/bin/zsh

name_regex="[A-Za-z\s,\.]{2,}"
email_regex="[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}"

get_input () {
  validate=`[[ $2 =~ ^-vb?$ ]]; echo $?`
  allow_blank=`[[ $2 =~ ^-vb$ ]]; echo $?`
  help=`[ ! $1 ] || [[ $1 =~ --?h(elp)? ]]; echo $?`

  if (( $help == 0 )); then
    echo "Usage: get_input <input_name>"
    echo
    echo "Options:"
    echo "  -v\t\t\tValidate the input, if validation is available"
    echo "  -vb\t\t\tValidate the input and allow blank values"
    echo "  -h, --help\t	Print this help message"
    return
  fi

  if (( $validate == 0 )); then
    log_input_error () {
      tput civis # hide cursor
      echo -T -r "$1\c"
      sleep 1
      echo -T
      echo -T "\r$NC> \c"
      tput cnorm # show cursor
    }

    if [[ ! $1 =~ (name|email|editor|working_dir) ]]; then
      echo -y "WARNING: validation not available for $1"
    fi

    echo -n "> "
    read $1

    case $1 in
      name)
        while (( $allow_blank == 1 )) || [ $name ] && ! [[ $name =~ $name_regex ]]; do
          log_input_error "You must specify a valid name"
          read name
        done
        ;;
      email)
        while (( $allow_blank == 1 )) || [ $email ] && [[ ! $email =~ $email_regex ]]; do
          if [ $email ]; then
            log_input_error "$email is not a valid email"
          else
            log_input_error "You must specify an email"
          fi
          read email
        done
        ;;
      editor)
        while (( $allow_blank == 1 )) || [ $editor ] && [ ! -f /Applications/$editor.app/Contents/MacOS/$editor ]; do
          if [ $editor ]; then
            log_input_error "${editor##*/} is not a valid application"
          else
            log_input_error "You must specify a valid editor"
          fi
          read editor
        done
        [ $editor ] && editor="/Applications/$editor.app/Contents/MacOS/$editor"
        ;;
      working_dir)
        while (( $allow_blank == 1 )) || [ $working_dir ] && [ ! -d $HOME/$working_dir/dotfiles ]; do
          if [ -d $HOME/$working_dir ]; then
            log_input_error "$HOME/$working_dir doesn't contain the required dotfiles"
          else
            log_input_error "$HOME/$working_dir is not a valid directory"
          fi
          read working_dir
        done
        [ $working_dir ] && working_dir="$HOME/$working_dir"
        ;;
      *);;
    esac

    unset -f log_input_error
  else
    echo -n "> "
    read $1
  fi
}
